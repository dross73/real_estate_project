openapi: 3.0.3
info:
  title: Real Estate API
  version: 1.0.0
  description: "MVP spec for a real estate listings platform. Scope limited to:\n\
    \  1) Listings CRUD (single cover image)\n  2) Auth & roles (admin, staff; admin-created\
    \ users)\n  3) Public browse/search with filtering & pagination\n"
servers:
- url: https://api.example.com/api/v1
  description: Production
- url: http://localhost:8000/api/v1
  description: Local development
tags:
- name: Auth
- name: Users
- name: Listings
paths:
  /auth/login:
    post:
      tags:
      - Auth
      summary: Log in and obtain a JWT
      operationId: auth_login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            examples:
              default:
                value:
                  email: admin@example.com
                  password: secret123
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/me:
    get:
      tags:
      - Users
      summary: Get the current authenticated user
      operationId: users_me
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Current user profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Missing or invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users:
    post:
      tags:
      - Users
      summary: Create a user (admin only)
      description: Only admins can create users. Staff cannot access this route.
      operationId: users_create
      security:
      - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
            examples:
              staffUser:
                value:
                  email: staff@example.com
                  password: ChangeMe123!
                  role: staff
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Missing or invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden (not an admin)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /listings:
    get:
      tags:
      - Listings
      summary: List listings (public)
      operationId: listings_list
      parameters:
      - name: city
        in: query
        schema:
          type: string
        description: Filter by city
      - name: price_min
        in: query
        schema:
          type: number
        description: Minimum price filter
      - name: price_max
        in: query
        schema:
          type: number
        description: Maximum price filter
      - name: bedrooms
        in: query
        schema:
          type: integer
        description: Filter by number of bedrooms
      - name: bathrooms
        in: query
        schema:
          type: integer
        description: Filter by number of bathrooms
      - name: page
        in: query
        schema:
          type: integer
          default: 1
        description: Page number for pagination
      - name: limit
        in: query
        schema:
          type: integer
          default: 10
        description: Number of results per page
      - name: sort
        in: query
        schema:
          type: string
          enum:
          - price_asc
          - price_desc
          - newest
        description: Sort results by price or newest
      responses:
        '200':
          description: Paginated listing results
          headers:
            X-Total-Count:
              description: Total number of records matching the filter
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListingPage'
              examples:
                default:
                  value:
                    items:
                    - id: 101
                      price: 325000
                      address: 123 Cedar St
                      city: Des Moines
                      state: IA
                      description: Updated ranch near parks
                      sqft: 1800
                      bedrooms: 3
                      bathrooms: 2
                      cover_image_url: https://cdn.example.com/l/101/cover.jpg
                      created_at: '2025-08-01T12:30:00Z'
                      updated_at: '2025-08-01T12:30:00Z'
                    limit: 20
                    offset: 0
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
      - Listings
      summary: Create a listing (single cover image)
      description: 'Accepts multipart form-data with listing fields and a single cover
        image file.

        Public read, authenticated write. Admin and staff can create.

        '
      operationId: listings_create
      security:
      - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
              - price
              - address
              - city
              - state
              - description
              - sqft
              - bedrooms
              - bathrooms
              - cover_image
              properties:
                price:
                  type: number
                  minimum: 0
                address:
                  type: string
                  maxLength: 200
                city:
                  type: string
                  maxLength: 100
                state:
                  type: string
                  pattern: ^[A-Z]{2}$
                  description: Two-letter US state code
                description:
                  type: string
                  maxLength: 2000
                sqft:
                  type: integer
                  minimum: 0
                bedrooms:
                  type: integer
                  minimum: 0
                bathrooms:
                  type: integer
                  minimum: 0
                cover_image:
                  type: string
                  format: binary
      responses:
        '201':
          description: Listing created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Listing'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Missing or invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden (role not permitted)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  /listings/{id}:
    get:
      tags:
      - Listings
      summary: Get a listing by id (public)
      operationId: listings_get
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          minimum: 1
      responses:
        '200':
          description: Listing details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Listing'
        '404':
          description: Listing not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
      - Listings
      summary: Update a listing (single cover image)
      description: Multipart form-data. Any field may be provided. Replace cover image
        by sending a new file.
      operationId: listings_update
      security:
      - bearerAuth: []
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          minimum: 1
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                price:
                  type: number
                  minimum: 0
                address:
                  type: string
                  maxLength: 200
                city:
                  type: string
                  maxLength: 100
                state:
                  type: string
                  pattern: ^[A-Z]{2}$
                description:
                  type: string
                  maxLength: 2000
                sqft:
                  type: integer
                  minimum: 0
                bedrooms:
                  type: integer
                  minimum: 0
                bathrooms:
                  type: integer
                  minimum: 0
                cover_image:
                  type: string
                  format: binary
      responses:
        '200':
          description: Listing updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Listing'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Missing or invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden (role not permitted)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Listing not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
    delete:
      tags:
      - Listings
      summary: Delete a listing
      operationId: listings_delete
      security:
      - bearerAuth: []
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          minimum: 1
      responses:
        '204':
          description: Listing deleted
        '401':
          description: Missing or invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden (role not permitted)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Listing not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Error:
      type: object
      required:
      - message
      properties:
        code:
          type: string
          description: Application-specific error code (e.g., bad_request, unauthorized,
            validation_error)
        message:
          type: string
        details:
          description: Optional structured error info
          oneOf:
          - $ref: '#/components/schemas/ValidationError'
          - type: object
    ValidationIssue:
      type: object
      required:
      - loc
      - msg
      properties:
        loc:
          description: Field path for the error
          type: array
          items:
            type: string
        msg:
          type: string
        type:
          type: string
    ValidationError:
      type: object
      required:
      - errors
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ValidationIssue'
    User:
      type: object
      required:
      - id
      - email
      - role
      - created_at
      properties:
        id:
          type: integer
          minimum: 1
        email:
          type: string
          format: email
        role:
          type: string
          enum:
          - admin
          - staff
        created_at:
          type: string
          format: date-time
    UserCreate:
      type: object
      required:
      - email
      - password
      - role
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
        role:
          type: string
          enum:
          - admin
          - staff
    LoginRequest:
      type: object
      required:
      - email
      - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
    LoginResponse:
      type: object
      required:
      - access_token
      - token_type
      - expires_in
      properties:
        access_token:
          type: string
        token_type:
          type: string
          example: Bearer
        expires_in:
          type: integer
          description: Seconds until token expiry
    Listing:
      type: object
      required:
      - id
      - price
      - address
      - city
      - state
      - description
      - sqft
      - bedrooms
      - bathrooms
      - cover_image_url
      - created_at
      - updated_at
      properties:
        id:
          type: integer
          minimum: 1
        price:
          type: number
          minimum: 0
        address:
          type: string
          maxLength: 200
        city:
          type: string
          maxLength: 100
        state:
          type: string
          pattern: ^[A-Z]{2}$
        description:
          type: string
          maxLength: 2000
        sqft:
          type: integer
          minimum: 0
        bedrooms:
          type: integer
          minimum: 0
        bathrooms:
          type: integer
          minimum: 0
        cover_image_url:
          type: string
          format: uri
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    ListingPage:
      type: object
      required:
      - items
      - limit
      - offset
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Listing'
        limit:
          type: integer
        offset:
          type: integer
security: []
